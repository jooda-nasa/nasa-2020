// <auto-generated>
// ReSharper disable CheckNamespace
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable NotAccessedVariable
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantCast
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// ReSharper disable UsePatternMatching
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace YodaClock.DataContext
{
    public class FakeYodaClockDbContext : IYodaClockDbContext
    {
        public DbSet<DbResponse> DbResponses { get; set; } // DbResponse
        public DbSet<Exercise> Exercises { get; set; } // Exercise
        public DbSet<LuxResponse> LuxResponses { get; set; } // LuxResponse
        public DbSet<Meal> Meals { get; set; } // Meal
        public DbSet<Nap> Naps { get; set; } // Nap
        public DbSet<Plan> Plans { get; set; } // Plan
        public DbSet<PlanMealTime> PlanMealTimes { get; set; } // PlanMealTime
        public DbSet<Product> Products { get; set; } // Product
        public DbSet<User> Users { get; set; } // User
        public DbSet<UserEnvironment> UserEnvironments { get; set; } // UserEnvironment
        public DbSet<UserMealExercise> UserMealExercises { get; set; } // UserMealExercise
        public DbSet<UserNap> UserNaps { get; set; } // UserNap
        public DbSet<UserPrecondition> UserPreconditions { get; set; } // UserPrecondition
        public DbSet<UserProductMeal> UserProductMeals { get; set; } // UserProductMeal

        public FakeYodaClockDbContext()
        {
            _database = null;

            DbResponses = new FakeDbSet<DbResponse>("Id");
            Exercises = new FakeDbSet<Exercise>("Id");
            LuxResponses = new FakeDbSet<LuxResponse>("Id");
            Meals = new FakeDbSet<Meal>("Id");
            Naps = new FakeDbSet<Nap>("Id");
            Plans = new FakeDbSet<Plan>("Id");
            PlanMealTimes = new FakeDbSet<PlanMealTime>("Id");
            Products = new FakeDbSet<Product>("Id");
            Users = new FakeDbSet<User>("Id");
            UserEnvironments = new FakeDbSet<UserEnvironment>("Id");
            UserMealExercises = new FakeDbSet<UserMealExercise>("Id");
            UserNaps = new FakeDbSet<UserNap>("Id");
            UserPreconditions = new FakeDbSet<UserPrecondition>("Id");
            UserProductMeals = new FakeDbSet<UserProductMeal>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }
    }
}
// </auto-generated>

