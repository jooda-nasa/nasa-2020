// <auto-generated>
// ReSharper disable CheckNamespace
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable NotAccessedVariable
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantCast
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// ReSharper disable UsePatternMatching
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace YodaClock.DataContext
{
    public interface IYodaClockDbContext : IDisposable
    {
        DbSet<DbResponse> DbResponses { get; set; } // DbResponse
        DbSet<Exercise> Exercises { get; set; } // Exercise
        DbSet<LuxResponse> LuxResponses { get; set; } // LuxResponse
        DbSet<Meal> Meals { get; set; } // Meal
        DbSet<Nap> Naps { get; set; } // Nap
        DbSet<Plan> Plans { get; set; } // Plan
        DbSet<PlanMealTime> PlanMealTimes { get; set; } // PlanMealTime
        DbSet<Product> Products { get; set; } // Product
        DbSet<SleepingPlace> SleepingPlaces { get; set; } // SleepingPlace
        DbSet<User> Users { get; set; } // User
        DbSet<UserEnvironment> UserEnvironments { get; set; } // UserEnvironment
        DbSet<UserMealExercise> UserMealExercises { get; set; } // UserMealExerise
        DbSet<UserNap> UserNaps { get; set; } // UserNap
        DbSet<UserPrecondition> UserPreconditions { get; set; } // UserPrecondition
        DbSet<UserProductMeal> UserProductMeals { get; set; } // UserProductMeal

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }
}
// </auto-generated>

